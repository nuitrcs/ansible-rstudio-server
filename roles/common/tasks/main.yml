---
- name: install dependencies and libraries
  yum:
    name: "{{ item }}"
    state: installed
  with_items:
    - blas
    - blas-devel
    - lapack
    - lapack-devel
    - tcl
    - tcllib
    - tcl-devel
    - tk
    - tk-devel
    - bzip2-devel
    - pcre-devel
    - libcurl-devel
    - readline-devel
    - ncurses-devel
    - libXt-devel
    - lzma
    - xz-devel
    - perl-Digest-MD5

- name: create /software
  file:
    path: "{{ software_path }}"
    state: directory
    mode: 0755

# zlib module
- name: download zlib
  get_url:
    url: "{{ zlib_url }}"
    dest: /tmp/{{ zlib_file }}

- name: unarchive zlib
  unarchive:
    src: /tmp/{{ zlib_file }}
    dest: "{{ src_path }}"
    remote_src: yes
    creates: "{{ src_path }}/zlib-{{ zlib_version }}"

- name: install zlib
  shell: ./configure --prefix={{ software_path }}/zlib/{{ zlib_version }} && make && make install
  args:
    chdir: "{{ src_path }}/zlib-{{ zlib_version }}"
    creates: libz.so

- name: create zlib module directory
  file:
    path: "{{ module_path }}/zlib"
    state: directory
    mode: 0755

- name: create zlib module file
  template:
    src: zlib.modulefile
    dest: "{{ module_path }}/zlib/{{ zlib_version }}"

# openmpi
- name: download openmpi
  get_url:
    url: "{{ openmpi_url }}"
    dest: /tmp/{{ openmpi_file }}

- name: unarchive openmpi
  unarchive:
    src: /tmp/{{ openmpi_file }}
    dest: "{{ src_path }}"
    remote_src: yes
    creates: "{{ src_path }}/openmpi-{{ openmpi_version }}"

- name: install openmpi
  shell: ./configure --prefix={{ software_path }}/mpi/openmpi-{{ openmpi_version }} && make && make install
  args:
    chdir: "{{ src_path }}/openmpi-{{ openmpi_version }}"
    creates: ompi/.libs/libmpi.so

- name: create openmpi module directory
  file:
    path: "{{ module_path }}/mpi"
    state: directory
    mode: 0755

- name: create openmpi module file
  template:
    src: openmpi.modulefile
    dest: "{{ module_path }}/mpi/openmpi-{{ openmpi_version }}"

# texlive
- name: check for texlive installation
  shell: "[ -d {{ software_path }}/texlive/2018 ]"
  register: texlive_installed

- name: download texlive installer iso
  get_url:
    url: "{{ texlive_iso_url }}"
    dest: /tmp/texlive.iso
  when: texlive_installed.rc == 1

- name: create texlive mount directory
  file:
    path: /mnt/dvd
    state: directory
    mode: 0755
  when: texlive_installed.rc == 1

- name: mount texlive installer
  mount:
    path: /mnt/dvd
    src: /tmp/texlive.iso
    fstype: iso9660
    opts: ro,noauto
    state: mounted
  when: texlive_installed.rc == 1

- name: create texlive software directory
  file:
    path: "{{ software_path }}/texlive"
    state: directory
    mode: 0755
  when: texlive_installed.rc == 1

- name: copy texlive install profile
  copy:
    src: texlive.profile
    dest: /tmp
  when: texlive_installed.rc == 1

- name: run texlive installer (will take a long time)
  shell: /mnt/dvd/install-tl -profile /tmp/texlive.profile
  args:
    creates: "{{ software_path }}/texlive/2018"
  when: texlive_installed.rc == 1

- name: create texlive module directory
  file:
    path: "{{ module_path }}/texlive"
    state: directory
    mode: 0755
  when: texlive_installed.rc == 1

- name: create texlive module file
  template:
    src: texlive.modulefile
    dest: "{{ module_path }}/texlive/2018"
  when: texlive_installed.rc == 1

- name: unmount dvd
  mount:
    path: /mnt/dvd
    src: /tmp/texlive.iso
    fstype: iso9660
    state: absent
  when: texlive_installed.rc == 1

- name: delete texlive iso
  file:
    path: /tmp/texlive.iso
    state: absent
  when: texlive_installed.rc == 1

# R
- name: download R source code
  get_url:
    url: "{{ r_url }}"
    dest: /tmp/{{ r_file }}

- name: unarchive R source code
  unarchive:
    src: /tmp/{{ r_file }}
    dest: "{{ src_path }}"
    remote_src: yes
    creates: "{{ src_path }}/R-{{ r_version }}"

- name: install R
  shell: ./configure --prefix={{ software_path }}/R/{{ r_version }} --enable-R-shlib --disable-openmp --disable-java --with-x=yes --with-tcltk --with-tcl-config=/usr/lib64/tclConfig.sh --with-tk-config=/usr/lib64/tkConfig.sh --with-blas --with-lapack && make && make install
  args:
    chdir: "{{ src_path }}/R-{{ r_version }}"
    creates: lib/libR.so

- name: create R module directory
  file:
    path: "{{ module_path }}/R"
    state: directory
    mode: 0755

- name: create R module file
  template:
    src: R.modulefile
    dest: "{{ module_path }}/R/{{ r_version }}"